---
import type { GetStaticPaths } from "astro";
import Layout from "../layouts/Layout.astro";
import BarGraph from "../components/graphs/BarGraph.astro";
import { allEquals, getUnique } from "../utils/object";
import { getColorByStudyProgrammeCode } from "../utils/utils";
import { getGradeEntries, getDataForGraph } from "../utils/hkdirApi";

export const getStaticPaths = (() => {
    return [
  "TDT4120-1",
  "TDT4160-1",
  "TDT4109-1",
  "TDT4100-1",
  "IT1901-1",
  "EXPH0300-1",
  "TDT4145-1",
  "TPD4114-1",
  "IT2901-1",
].map(code => ({params: {classCode: code}}));
}) satisfies GetStaticPaths;

const {classCode} = Astro.params;

// Values for specifying graph
const filtering = {
  classCode: classCode,
  year: 2023,
  semester: "Høst",
};

const gradeEntries = await getGradeEntries(["BIT", "MTDT"], [
              filtering.classCode
            ]);

const data = getDataForGraph(
  gradeEntries.filter((entry) => allEquals(entry, filtering))
);
---

<Layout title={`Studieløpet | ${classCode}`}>
    <main>
        <h1>Studie<span class="text-gradient">løpet</span></h1>
    <div class="bg-gray-800 p-5 flex flex-col ">
      <h2 class="">{filtering.classCode.slice(0, -2)}</h2>
      <h3 class="italic text-sm mb-2">{filtering.semester} {filtering.year}</h3>
      <BarGraph
        data={data}
        seriesConfig={getUnique(
          gradeEntries,
          (entry) => entry.studyProgrammeCode
        ).map((code) => ({
          label: code,
          color: getColorByStudyProgrammeCode(code),
        }))}
      />
    </main>
</Layout>
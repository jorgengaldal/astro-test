---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import BarGraph from "../components/graphs/BarGraph.astro";
import { allEquals, getUnique } from "../utils/object";
import { getColorByStudyProgrammeCode } from "../utils/utils";
import { fetchClasses, fetchGradeEntries, getDataForGraph } from "../utils/hkdirApi";

const allClasses = (await fetchClasses())

const {classCode} = Astro.params;
const page = allClasses.find((classObject) => classObject.classCode.slice(0, -2) === classCode);
if (!page) return Astro.redirect("/404");

// Values for specifying graph
const filtering = {
  classCode: page.classCode,
  year: page.year,
//   semester: page.semester,
};

const gradeEntries = await fetchGradeEntries(["BIT", "MTDT"], [
              filtering.classCode
            ], 2);

console.log(gradeEntries)

const filteredGradeEntries = gradeEntries.filter((entry) => allEquals(entry, filtering))
const data = getDataForGraph(filteredGradeEntries);

const semester = filteredGradeEntries[0].semester
---

<Layout title={`Studieløpet | ${classCode}`}>
    <main>
        <h1>Studie<span class="text-gradient">løpet</span></h1>
    <div class="bg-gray-800 p-5 flex flex-col ">
      <h2 class="">{filtering.classCode.slice(0, -2)}</h2>
      <h3 class="italic text-sm mb-2">{semester} {filtering.year}</h3>
      <BarGraph
        data={data}
        seriesConfig={getUnique(
          gradeEntries,
          (entry) => entry.studyProgrammeCode
        ).map((code) => ({
          label: code,
          color: getColorByStudyProgrammeCode(code),
        }))}
      />
    </main>
</Layout>